;; Exhaustive Hamiltonian path finder

(defun init-graph (data val)
  "Initialize the graph nodes to value."
  (dolist (state data)
    (set (car state) val)))

(defun print-path (path)
  "Output the path sexp."
  (insert (format "%S\n" path)))

(defun find-hamil (data state stack)
  "Recursively find all Hamiltonian paths."
  (push state stack)
  (cond
   ((eq (symbol-value state) 'visited) nil)
   ((= (length stack) (length data)) (print-path (reverse stack)))
   (t (set state 'visited)
      (dolist (cur (cdr (assq state data)))
	(find-hamil data cur stack))
      (set state 'unvisited))))

(defun hamil ()
  "Find and output all Hamiltonian paths in the data to buffer *hamil*."
  (interactive)
  (let ((data sample-graph)
	(first 'a))
    (init-graph data 'unvisited)
    (with-current-buffer (get-buffer-create "*hamil*")
      (erase-buffer)
      (find-hamil data first '()))))

;; Simple sample graph
(defvar sample-graph
  '((a d)
    (b j d)
    (c d e)
    (d a b j i g c)
    (e c g f)
    (f h g e)
    (g d e f)
    (h i f)
    (i d h j)
    (j b d i))
  "Simple sample graph.")

;; US state graph data
(defvar us-states 
  '((me nh)
    (nh vt ma me)
    (vt ny ma nh)
    (ma ri ct ny nh vt)
    (ny pa nj ma ct vt)
    (ri ma ct)
    (ct ri ma ny)
    (nj pa ny de)
    (de md pa nj)
    (pa nj ny de md wv oh)
    (md pa de va wv)
    (va md wv ky tn nc)
    (nc va tn ga sc)
    (sc nc ga)
    (ga fl sc al nc tn)
    (al ms fl ga tn)
    (ms la ar tn al)
    (tn ms al ga nc va ky mo ar)
    (ky wv va tn mo il in oh)
    (wv md pa oh ky va)
    (oh pa wv ky in mi)
    (fl al ga)
    (mi wi oh in)
    (wi mn ia il mi)
    (il in ky mo ia wi)
    (in oh ky il mi)
    (mo il ky tn ar ok ks ne ia)
    (ar mo tn ms la tx ok)
    (la ms ar tx)
    (tx ok nm ar la)
    (ok ks mo ar tx nm co)
    (ks ok co ne mo)
    (ne sd ia mo ks co wy)
    (sd nd mn ia ne wy mt)
    (nd mt sd mn)
    (ia ne mo il wi mn sd)
    (mn wi ia sd nd)
    (mt id wy sd nd)
    (wy id ut co ne sd mt)
    (co ne ks ok nm ut wy)
    (nm co ok tx az)
    (az nm ut ca nv)
    (ut nv id wy co az)
    (id mt wy ut nv or wa)
    (wa or id)
    (or wa id nv ca)
    (nv or id ut az ca)
    (ca az nv or))
  "US state border connections.")
